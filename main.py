import requests
import telebot
from telebot import types
import phonenumbers
from phonenumbers import carrier, geocoder
import socket
import json
import os

# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '7149009411:AAEUtU2eq1oiVl4DBEbUjEr5RFQOg0oB6KE'

# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç API-–∫–ª—é—á –Ω–∞ —Å–≤–æ–π –∫–ª—é—á –æ—Ç opencagedata.com
API_KEY = 'bdf74038f14a42e8a2a38ec23a05842e'

bot = telebot.TeleBot(BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
output_format = 'usual'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç –ø–∏—Å–∞—Ç—å—Å—è –ª–æ–≥–∏
group_id = -1002166461586 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if message.chat.id not in users_data:
        users_data[message.chat.id] = {
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        bot.send_message(group_id, f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–æ—Ç–µ: {message.from_user.username} ({message.from_user.first_name} {message.from_user.last_name})")

    markup = types.InlineKeyboardMarkup()
    item_ip = types.InlineKeyboardButton("üíª –ê–π–ø–∏", callback_data='ip')
    item_phone = types.InlineKeyboardButton("üì± –ù–æ–º–µ—Ä", callback_data='phone')
    item_settings = types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
    markup.add(item_ip, item_phone, item_settings)

    bot.send_message(message.chat.id, 
                    f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –¢—ã –≤ –±–æ—Ç–µ –æ—Ç @fightlor. \n\n"
                    f"> –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–±–∏—Ç–∏—è –æ—Å–∏–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", 
                    reply_markup=markup)

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@bot.callback_query_handler(func=lambda call: call.data == 'settings')
def handle_settings(call):
    markup = types.InlineKeyboardMarkup()
    item_json = types.InlineKeyboardButton("JSON", callback_data='json')
    item_txt = types.InlineKeyboardButton("TXT", callback_data='txt')
    item_usual = types.InlineKeyboardButton("–û–±—ã—á–Ω—ã–π", callback_data='usual')
    markup.add(item_json, item_txt, item_usual)

    bot.edit_message_text(chat_id=call.message.chat.id, 
                          message_id=call.message.message_id,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:", 
                          reply_markup=markup)
                          # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@bot.callback_query_handler(func=lambda call: call.data in ['json', 'txt', 'usual'])
def handle_output_format(call):
    global output_format
    output_format = call.data

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    send_welcome(call.message)

@bot.message_handler(commands=['online'])
def handle_online(message):
    online_count = len(users_data)
    bot.send_message(message.chat.id, f"–°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω {online_count} —á–µ–ª–æ–≤–µ–∫.")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    if call.data == 'ip':
        bot.edit_message_text(chat_id=call.message.chat.id, 
                              message_id=call.message.message_id,
                              text="–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(call.message, handle_ip) 
    elif call.data == 'phone':
        bot.edit_message_text(chat_id=call.message.chat.id, 
                              message_id=call.message.message_id,
                              text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(call.message, handle_phone)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    # –í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text.startswith('https://') or message.text.startswith('http://'):
        pass
    elif message.text.startswith('+'):
        pass
    else:
        bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ IP-–∞–¥—Ä–µ—Å–∞
def handle_ip(message):
    ip = message.text
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ IP-–∞–¥—Ä–µ—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
        try:
            socket.inet_aton(ip)
        except socket.error:
            bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å.")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP-–∞–¥—Ä–µ—Å–µ
        response = requests.get(f'https://ipinfo.io/{ip}/json')
        response.raise_for_status()
        data = response.json()

        city = data.get('city')
        region = data.get('region')
        country = data.get('country')
        org = data.get('org')
        loc = data.get('loc')
        hostname = data.get('hostname')
        postal = data.get('postal')
        timezone = data.get('timezone')

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é opencagedata.com
        url = f"https://api.opencagedata.com/geocode/v1/json?q={city},{region},{country}&key={API_KEY}&language=ru"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        results = data.get('results', [])
        if results:
            result = results[0]
            latitude = result.get('geometry', {}).get('lat')
            longitude = result.get('geometry', {}).get('lng')

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö WHOIS
            try:
                response = requests.get(f'https://api.hackertarget.com/whois/?q={ip}')
                response.raise_for_status()
                whois_data = response.text
                whois_lines = whois_data.splitlines()
                whois_dict = {}
                for line in whois_lines:
                    if ':' in line:
                        key, value = line.split(':', 1)
                        whois_dict[key.strip()] = value.strip()
            except requests.exceptions.RequestException as e:
                whois_data = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö WHOIS: {e}"
                whois_dict = {}

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API ip-api.com
            try:
                response = requests.get(f'http://ip-api.com/json/{ip}')
                response.raise_for_status()
                ip_api_data = response.json()
            except requests.exceptions.RequestException as e:
                ip_api_data = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å ip-api.com: {e}"

            # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É
            map_link = f"https://www.google.com/maps/search/?api=1&query={latitude},{longitude}"

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            info = f"""
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP-–∞–¥—Ä–µ—Å–µ {ip}:
–ì–æ—Ä–æ–¥: {city}
–†–µ–≥–∏–æ–Ω: {region}
–°—Ç—Ä–∞–Ω–∞: {country}
–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {postal}
–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}
–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org}
–•–æ—Å—Ç: {hostname}
–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ: {map_link}

*WHOIS:*
role:           {whois_dict.get('role', 'N/A')}
address:        {whois_dict.get('address', 'N/A')}
admin-c:        {whois_dict.get('admin-c', 'N/A')}
tech-c:         {whois_dict.get('tech-c', 'N/A')}
nic-hdl:        {whois_dict.get('nic-hdl', 'N/A')}
mnt-by:         {whois_dict.get('mnt-by', 'N/A')}
created:        {whois_dict.get('created', 'N/A')}
last-modified:  {whois_dict.get('last-modified', 'N/A')}
source:         {whois_dict.get('source', 'N/A')}

*ip-api.com:*
ISP:           {ip_api_data.get('isp', 'N/A')}
AS:            {ip_api_data.get('as', 'N/A')}
Mobile:        {ip_api_data.get('mobile', 'N/A')}
Proxy:         {ip_api_data.get('proxy', 'N/A')}
Hosting:      {ip_api_data.get('hosting', 'N/A')}
Type:          {ip_api_data.get('type', 'N/A')}
Continent:     {ip_api_data.get('continent', 'N/A')}
Country:       {ip_api_data.get('country', 'N/A')}
RegionName:    {ip_api_data.get('regionName', 'N/A')}
City:          {ip_api_data.get('city', 'N/A')}
Zip:           {ip_api_data.get('zip', 'N/A')}
Lat:           {ip_api_data.get('lat', 'N/A')}
Lon:           {ip_api_data.get('lon', 'N/A')}
Timezone:      {ip_api_data.get('timezone', 'N/A')}
Currency:      {ip_api_data.get('currency', 'N/A')}
            """

            if output_format == 'json':
                with open('ip_info.json', 'w') as f:
                    json.dump(data, f)
                bot.send_document(message.chat.id, open('ip_info.json', 'rb'), caption="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª ip_info.json.")
            elif output_format == 'txt':
                with open('ip_info.txt', 'w') as f:
                    f.write(info)
                bot.send_document(message.chat.id, open('ip_info.txt', 'rb'), caption="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª ip_info.txt.")
            else:
                bot.reply_to(message, info)
        else:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏.")
        send_welcome(message)

    except requests.exceptions.RequestException as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}") 

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def handle_phone(message):
    phone_number = message.text
    try:
        parsed_number = phonenumbers.parse(phone_number)
        if phonenumbers.is_valid_number(parsed_number):
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–º–µ—Ä–µ
            carrier_name = carrier.name_for_number(parsed_number, "ru")
            region = geocoder.description_for_number(parsed_number, "ru")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API opencagedata.com
            url = f"https://api.opencagedata.com/geocode/v1/json?q={phone_number}&key={API_KEY}&language=ru"
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            results = data.get('results', [])
            if results:
                result = results[0]
                country_code = result.get('components', {}).get('country_code')
                city = result.get('components', {}).get('city', '')
                region = result.get('components', {}).get('state', '')

                info = f"""
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ {phone_number}:
–û–ø–µ—Ä–∞—Ç–æ—Ä: {carrier_name}
–†–µ–≥–∏–æ–Ω: {region}
–°—Ç—Ä–∞–Ω–∞: {country_code}
–ì–æ—Ä–æ–¥: {city}
                """

                if output_format == 'json':
                    with open('phone_info.json', 'w') as f:
                        json.dump(data, f)
                    bot.send_document(message.chat.id, open('phone_info.json', 'rb'), caption="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª phone_info.json.")
                elif output_format == 'txt':
                    with open('phone_info.txt', 'w') as f:
                        f.write(info)
                    bot.send_document(message.chat.id, open('phone_info.txt', 'rb'), caption="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª phone_info.txt.")
                else:
                    bot.reply_to(message, info)
            else:
                bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ.")
        else:
            bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    except phonenumbers.phonenumberutil.NumberParseException:
        bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    except requests.exceptions.RequestException as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    bot.infinity_polling()
